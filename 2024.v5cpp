{"mode":"Text","hardwareTarget":"brain","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\ncontroller Controller1 = controller(primary);\nmotor Left_Front_Drive = motor(PORT18, ratio6_1, true);\n\nmotor Left_Middle_Drive = motor(PORT19, ratio6_1, true);\n\nmotor Left_Back_Drive = motor(PORT20, ratio6_1, true);\n\nmotor Right_Front_Drive = motor(PORT8, ratio6_1, false);\n\nmotor Right_Middle_Drive = motor(PORT9, ratio6_1, false);\n\nmotor Right_Back_Drive = motor(PORT10, ratio6_1, false);\n\nmotor IntakeMotorA = motor(PORT16, ratio6_1, false);\nmotor IntakeMotorB = motor(PORT15, ratio6_1, true);\nmotor_group Intake = motor_group(IntakeMotorA, IntakeMotorB);\n\ndigital_out DigitalOutA = digital_out(Brain.ThreeWirePort.A);\n\n\n// generating and setting random seed\nvoid initializeRandomSeed(){\n  int systemTime = Brain.Timer.systemHighResolution();\n  double batteryCurrent = Brain.Battery.current();\n  double batteryVoltage = Brain.Battery.voltage(voltageUnits::mV);\n\n  // Combine these values into a single integer\n  int seed = int(batteryVoltage + batteryCurrent * 100) + systemTime;\n\n  // Set the seed\n  srand(seed);\n}\n\n\n\nvoid vexcodeInit() {\n\n  //Initializing random seed.\n  initializeRandomSeed(); \n}\n\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n/*----------------------------------------------------------------------------*/\n/*                                                                            */\n/*    Module:       main.cpp                                                  */\n/*    Author:       {author}                                                  */\n/*    Created:      {date}                                                    */\n/*    Description:  V5 project                                                */\n/*                                                                            */\n/*----------------------------------------------------------------------------*/\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\nint Left_Button = 0;\nbool Recently_Pressed_Left = false;\nvoid Intake_Move(int x){\n  if (x == 0){\n    Intake.stop();\n  }else if (x == 1){\n    Intake.spin(forward);\n  }else if (x == 2){\n    Intake.spin(reverse);\n  }\n}\n\nvoid set_tank(double left, double right){\n  Left_Front_Drive.setVelocity(left,percent);\n  Left_Middle_Drive.setVelocity(left,percent);\n  Left_Back_Drive.setVelocity(left,percent);\n  Right_Front_Drive.setVelocity(right,percent);\n  Right_Middle_Drive.setVelocity(right,percent);\n  Right_Back_Drive.setVelocity(right,percent);\n}\ndouble clip_num(double input, double max, double min){\n  if (input>max){\n    return max;\n  }\n  else if (input < min) {\n    return min;\n  }\n  return input;\n}\ndouble pi = 3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172;\nvoid go(double dist, double power){\n  Left_Back_Drive.setPosition(0,degrees);\n  Right_Back_Drive.setPosition(0,degrees);\n  // 3/4 gear ratio, wheel circumference is 2.75 inch * pi\n  double total_dist = (dist*360*4)/(2.75*pi*3);\n\n  while (true){\n\n  }\n}\n\nint main() {\n  Intake.setVelocity(100,percent);\n  \n  while(true){\n    \n    \n    Brain.Screen.clearLine(2);\n    //Motor3.setVelocity(Controller1.Axis3.position(),percent);\n    Left_Front_Drive.spin(forward,Controller1.Axis3.position()*12/100,volt);\n    Left_Middle_Drive.spin(forward,Controller1.Axis3.position()*12/100,volt);\n    Left_Back_Drive.spin(forward,Controller1.Axis3.position()*12/100,volt);\n    Right_Front_Drive.spin(forward,Controller1.Axis2.position()*12/100,volt);\n    Right_Middle_Drive.spin(forward,Controller1.Axis2.position()*12/100,volt);\n    Right_Back_Drive.spin(forward,Controller1.Axis2.position()*12/100,volt);\n    \n    if (Controller1.ButtonL1.pressing() == true and Controller1.ButtonL2.pressing() == false){\n      Left_Button = 1;\n      Recently_Pressed_Left = false;\n    }else if (Controller1.ButtonL1.pressing() == false and Controller1.ButtonL2.pressing() == true){\n      Left_Button = 2;\n      Recently_Pressed_Left = false;\n    }else if (Controller1.ButtonL1.pressing() == true and Controller1.ButtonL2.pressing() == true and Left_Button > 0 and Recently_Pressed_Left == false){\n      Recently_Pressed_Left = true;\n      Left_Button ++;\n      if (Left_Button == 3){\n        Left_Button = 1;\n      }\n    }else if (Controller1.ButtonL1.pressing() == false and Controller1.ButtonL2.pressing() == false){\n      Left_Button = 0;\n\n    }else if (Controller1.ButtonL1.pressing() == true and Controller1.ButtonL2.pressing() == true and Left_Button == 0){\n      Left_Button = 1;\n    }\n    Intake_Move(Left_Button);\n    if (Controller1.ButtonR1.pressing() == true){\n      DigitalOutA.set(true);\n    }else if (Controller1.ButtonR2.pressing() == true){\n      DigitalOutA.set(false);\n    }\n    \n    \n  }\n  \n}\n","textLanguage":"cpp","robotConfig":[{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[18],"name":"Left_Front_Drive","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio6_1"}},{"port":[19],"name":"Left_Middle_Drive","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio6_1"}},{"port":[20],"name":"Left_Back_Drive","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio6_1"}},{"port":[8],"name":"Right_Front_Drive","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"}},{"port":[9],"name":"Right_Middle_Drive","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"}},{"port":[10],"name":"Right_Back_Drive","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"}},{"port":[16,15],"name":"Intake","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio6_1","motor_a_reversed":"false","motor_b_reversed":"true"}},{"port":[1],"name":"DigitalOutA","customName":false,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.3","minVersion":"3.1.0","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}